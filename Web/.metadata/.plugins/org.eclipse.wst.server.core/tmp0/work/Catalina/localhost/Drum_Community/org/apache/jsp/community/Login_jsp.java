/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2017-06-01 10:15:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.community;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;

public final class Login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	String id, password, name, email, phone, gender;

	public void jspInit(String Id, String PW) {
		BufferedReader reader = null;
		try {
			//String filePath = application.getRealPath("/WEB-INF/" + "\\" + Id + ".txt");
			//reader = new BufferedReader(new FileReader(filePath));
			String line = "";
			String[] s;			
			while((line = reader.readLine()) != null) {
					s = line.split("\n");
					id = s[0];
					password = s[1];
					name = s[2];
					email = s[3];
					phone = s[4];
					gender = s[5];
			}			
		} catch (Exception fnfe) {
			System.out.println("회원정보가 존재하지 않습니다.");
		} finally {
			try {
				reader.close();
			} catch (Exception e) {
			}
		}
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String Id = (String)session.getAttribute("ID");
	String pw = (String)session.getAttribute("Password");
	jspInit(Id, pw);

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\tdiv#table {\r\n");
      out.write("\t\twidth: auto;\r\n");
      out.write("\t\tborder-collapse: colapse;\r\n");
      out.write("\t\ttext-align: center;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\theader {\r\n");
      out.write("    \theight: 65px;\r\n");
      out.write("    \ttext-align: center;\r\n");
      out.write("\t\tpadding: 5px;\r\n");
      out.write("\t\tmargin: 10px;\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttd, th {\r\n");
      out.write("\t\tfont-size: 12pt;\r\n");
      out.write("\t\tborder: 1px solid #98BF21;\r\n");
      out.write("\t\theight: 30px;\r\n");
      out.write("\t\tpadding: 5px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttr, td {\r\n");
      out.write("\t\tcolor: #000000;\r\n");
      out.write("\t\tbackground-color: #EAF2D3;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tth {\r\n");
      out.write("\t\tbackground-color: #A7C942;\r\n");
      out.write("\t\tcolor: #FFFFFF;\r\n");
      out.write("\t\tfont-family: Georgia;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tinput {\r\n");
      out.write("\t\theight: 25px;\r\n");
      out.write("\t\twidth: 200px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tinput [type = \"submit\"], [type = \"button\"], [type = \"radio\"]{\r\n");
      out.write("\t\theight: 25px;\r\n");
      out.write("\t\twidth: 50px;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<title>홈페이지 구현하기</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form method = post>\r\n");
      out.write("\t<div id = wapper align = center>\r\n");
      out.write("\t\t<header>\r\n");
      out.write("\t\t\t<font size = 20pt> 게시판 목록</font> <hr>\r\n");
      out.write("\t\t</header>\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th> <font size = 3pt> 제목 </font> </th>\r\n");
      out.write("\t\t\t\t<td> </td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan = 2 align = center>\r\n");
      out.write("\t\t\t\t<input type = submit value = '게시글 작성'>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
